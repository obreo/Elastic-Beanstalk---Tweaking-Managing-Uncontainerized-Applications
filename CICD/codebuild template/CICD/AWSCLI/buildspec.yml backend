    # This is a buildspec script that will build the nodejs source, compress it and uplode it to s3 bucket, then update the elastic beanstalk environment with it.
    # Make sure that CodeBuild has role to access all the resources mentioned in this script so it can use awscli without authentication.
    version: 0.2
    env:
      variables:
        S3_BUCKET: "${aws_s3_bucket.bucket.bucket}"
        S3_FOLDER: "${var.name}-versions"
        ZIP_FILE_NAME: "${var.name}"
        EB_APP: "${aws_elastic_beanstalk_application.application.name}"
        EB_ENV: "${aws_elastic_beanstalk_environment.environment.name}"

    phases:
      install:
        runtime-versions:
          nodejs: 20
      pre_build:
        commands:
          - echo Calling environment variables using SSM Parameters for building..
          - while read -r name value; do export_string="$${name##*/}=$value"; export "$export_string"; done < <(aws ssm get-parameters-by-path --path "${var.parameter_path}" --with-decryption --query "Parameters[*].[Name,Value]" --output text)
          - echo Injecting .Platform Hook directory file to call SSM path as an alternative to the environment properties - for envionments that require to be running during runtime.
          - sed -i 's|{PARAMETERS_PATH}|${var.parameter_path}|g' ./.platfrom/hooks/predeploy/environment_properties.sh
          - npm install
      build:
        commands:
          - echo Compiling..
          - npm run build
          #- find . -type f -exec zip $${ZIP_FILE_NAME}.zip {} +
          - zip -r $${ZIP_FILE_NAME}.zip . -x ".git/*"
          - echo Pushing ZIP artifacts to S3 bucket
          - aws s3 cp $${ZIP_FILE_NAME}.zip s3://$${S3_BUCKET}/$${S3_FOLDER}/$${ZIP_FILE_NAME}.zip
          - echo Creating a new Elastic Beanstalk version with the new build file.
          - aws elasticbeanstalk create-application-version --application-name $${EB_APP} --version-label $${CODEBUILD_BUILD_NUMBER} --source-bundle S3Bucket=$${S3_BUCKET},S3Key=$${S3_FOLDER}/$${ZIP_FILE_NAME}.zip
          - echo Updating the Elastic Beanstalk environment.
          - aws elasticbeanstalk update-environment --environment-name $${EB_ENV} --version-label $${CODEBUILD_BUILD_NUMBER}
      post_build:
        commands:
          - echo Flushing Cloudfront cache is done from the instance level, check postdeploy script for inspection.
          #- aws cloudfront create-invalidation --distribution-id E1LW315A1684TC --paths '/*'